import time


"""Модуль time в Python предоставляет функции для работы со временем на уровне операционной системы.
Он позволяет получать текущее время, делать паузы в выполнении программы,
а также форматировать и преобразовывать временные данные. 
Основное представление времени в этом модуле — это количество секунд, 
прошедших с начала эпохи Unix (1 января 1970 года, 00:00:00 UTC)."""

#? time() - функция time.time() возвращает время в виде числа секунд с начала эпохи Unix (включает доли секунд):
curent_time = time.time()
print(f"Текущее время в секундах с начала эпохи(time): {curent_time}")
print()

#? gmtime() - функция возвращает текущее время в формате UTC 
#? (универсальное координированное время) в виде структуры struct_time
utc_time = time.gmtime()
print(f"Текущее UTC время(gmtime): {utc_time}")
print()

#? localtime() - возвращает локальное время в формате struct_time. 
#? Аналогично gmtime(), но учитывает ваш часовой пояс:
local_time = time.localtime()
print(f"Локальное время(localtime): {local_time}")
print()

#? mktime() - преобразует объект struct_time обратно в количество секунд,
#? прошедших с начала эпохи Unix. Это противоположность функциям gmtime() и localtime()
times_tamp = time.mktime(local_time)
print(f"Количество секунд с начала эпохи Unix(mktime): {times_tamp}")
print()

#? sleep() - функция time.sleep(seconds) приостанавливает выполнение программы на заданное количество секунд.
#? Можно передать как целое число, так и число с плавающей запятой для дробных задержек:
print("2 seconds pause")
time.sleep(2)
print("Let's go!")
print()

#? strftime() - форматирует объект struct_time в строку на основе переданного формата.
#? Это полезно для вывода даты и времени в удобном для человека виде:
formatted_time = time.strftime("%Y-%m-%d %H-%M-%S", local_time)
print(f"Отформатированное время(strftime): {formatted_time}")
print()
#* Основные коды для форматирования:
#   %Y — полный год (например, 2024)
#   %m — месяц (01-12)
#   %d — день месяца (01-31)
#   %H — часы (00-23)
#   %M — минуты (00-59)
#   %S — секунды (00-59)
#   %A — полное название дня недели
#   %B — полное название месяца

#? strptime() - преобразует строку в объект struct_time на основе переданного формата. 
#? Это полезно для парсинга дат из строк:
date_string = "25-09-2024 15:01:05"
parsed_time = time.strptime(date_string, "%d-%m-%Y %H:%M:%S")
print(f"Распарсенное время(strptime): {parsed_time}")
print()

#? asctime() - возвращает строку, представляющую время в формате "Weekday Month Day Hour:Minute:Second Year".
#? Она принимает объект struct_time в качестве параметра или использует текущее время:
ascii_time = time.asctime(utc_time)
print(f"Читаемое время(asctime): {ascii_time}")
print()

#? ctime() - аналогична asctime(), но принимает количество секунд с начала эпохи Unix
#? в качестве параметра и преобразует его в строковое представление времени
ctime_time = time.ctime(curent_time)
print(f"Читаемое время с использованием ctime: {ctime_time}")
