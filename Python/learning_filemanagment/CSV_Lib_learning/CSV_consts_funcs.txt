1. Важные функции и константы
А) csv.reader() и csv.writer()
    csv.reader(file, delimiter, quotechar, ...) : Создает объект csv.reader.
    csv.writer(file, delimiter, quotechar, ...) : Создает объект csv.writer.
Б) csv.DictReader() и csv.DictWriter()
    csv.DictReader(file, fieldnames=None, ...) : Создает объект csv.DictReader.
    csv.DictWriter(file, fieldnames, ...) : Создает объект csv.DictWriter.
В) Настройки квотинга (quoting) :
    csv.QUOTE_MINIMAL : Кавычки только вокруг значений с разделителями (по умолчанию).
    csv.QUOTE_ALL : Все значения обрамляются кавычками.
    csv.QUOTE_NONNUMERIC : Числа записываются как строки, остальные значения в кавычках.
    csv.QUOTE_NONE : Кавычки отключены.
Г) Работа с диалектами (dialect) :
    csv.get_dialect(name) : Возвращает сохраненный диалект.
    csv.list_dialects() : Возвращает список имен зарегистрированных диалектов.
    csv.register_dialect(name, dialect) : Регистрирует новый диалект.
    csv.unregister_dialect(name) : Удаляет зарегистрированный диалект.
    


2. Ключевые параметры
    delimiter : Разделитель полей (,, ;, \t и т.д.).
    quotechar : Символ для кавычек (например, ") вокруг значений.
    lineterminator : Символ конца строки (по умолчанию \r\n).
    skipinitialspace : Пропуск пробелов после разделителя.



3. Важные моменты
    newline='' в open(): Нужен при записи, чтобы избежать лишних пустых строк в Windows.
    Обработка ошибок : Если данные содержат разделители внутри значений (например, запятые в строке), используйте кавычки или QUOTE_ALL.



4. Сравнение классов
----------------------+------------------------+-------------------------------------------+
Класс                   Формат данных           Преимущества
----------------------+------------------------+-------------------------------------------+
csv.reader              Списки                  Простота, подходит для плоских данных
csv.DictReader          Словари                 Удобство доступа по именам столбцов
csv.writer              Списки                  Простая запись данных
csv.DictWriter          Словари                 Работа с данными как с именованными полями
----------------------+------------------------+-------------------------------------------+



5. Диалекты
Можно сгруппировать параметры форматирования csv файла используя

Чтобы каждый раз не указывать формат входных и выходных данных,
определенные параметры форматирования сгруппированы в диалекты (dialect). 
При создании объекта reader или writer программист может указать нужный ему диалект, 
кроме того, некоторые параметры диалекта можно переопределить вручную, 
также указав их при создании объекта.

Для создания диалекта используется команда:

```register_dialect("имя", delimiter = "\t", ...)```

Реальный пример:
```
import csv


csv.register_dialect("my_dialect", delimiter="^", lineterminator="\r")
with open(file="data.csv", mode="wt", encoding="utf-8") as file:
    writer = csv.writer(file, 'my_dialect')
    writer.writerow(["Имя", "Класс", "Возраст"])
    writer.writerow(["Женя", "3", "10"])
    writer.writerow(["Саша", "5", "12"])
    writer.writerow(["Маша", "11", "18"])
```