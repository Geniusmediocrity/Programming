import pandas as pd
from pathlib import Path


#! Библиотека pandas
#?   Библиотека pandas - это мощный инструмент для анализа данных на языке программирования Python. 
# Она предоставляет высокоуровневые структуры данных и функции, предназначенные для работы с табличными данными и временными рядами. 
# Вот некоторые основные возможности библиотеки pandas:
#*       DataFrame: Основная структура данных в pandas - это DataFrame, 
# представляющая собой двумерную таблицу данных с метками строк и столбцов. 
# DataFrame позволяет хранить и манипулировать данными различных типов.
#*       Series: Series - это одномерный массив данных, похожий на столбец в таблице DataFrame. 
# Он состоит из последовательности значений и соответствующих им меток (индексов).
#*       Чтение и запись данных: pandas предоставляет функции для чтения данных из различных источников, 
# таких как файлы CSV, Excel, SQL-базы данных, JSON и другие форматы. 
# Также можно записывать данные обратно в эти форматы.
#*       Манипуляции с данными: Библиотека pandas обладает богатым набором функций для фильтрации, 
# сортировки, группировки, преобразования и агрегации данных. 
# Это позволяет легко проводить различные анализы данных и получать необходимую информацию из них.
#*       Работа с пропущенными данными: pandas предоставляет методы для обнаружения и обработки пропущенных значений в данных, 
# что делает анализ данных более надежным и удобным.
#*       Объединение данных: pandas позволяет объединять данные из разных источников и объединять их в один DataFrame или Series.
#*       Временные ряды: Библиотека pandas имеет мощные инструменты для работы с временными рядами, 
# включая функции для временного индексирования, ресемплирования, выравнивания и агрегации временных данных.


data = Path("Pandas_csv_reading/data.csv").resolve()
#! 1. Чтение данных из файла CSV: Для чтения данных из файла CSV используется функция pd.read_csv().
# Она позволяет загрузить данные из CSV файла и создать DataFrame.
print("1.1:")
df = pd.read_csv(data)
print(df)
print()
print("1.2:")
filtered_df = df[df["Age"] > 16]
# ==
# filtered_df = pd.query("Age > 16")
print(filtered_df)
print()

# Ключевые параметры read_csv:
#?      sep/delimiter : Указание разделителя (например, ;, \t).
print("1.3:")
df = pd.read_csv(data, sep=',')
print(df)
print()

#?      header : Индекс строки, которая станет заголовком (по умолчанию 0).
# Грубо говоря откуда начинать чтение
print("1.4:")
df = pd.read_csv(data, header=None)  # Если заголовков нет
print(df)
print()

#?      names : Список имён для столбцов (если заголовки отсутствуют).
df = pd.read_csv(data, names=['ID', 'Name', 'Age'])
print("1.5:")
print(df)
print()

#?      index_col : Столбец, который станет индексом DataFrame.
print("1.6:")
df = pd.read_csv(data, index_col='ID')
print(df)
print()

#?      na_values : Указание значений, которые считаются NaN.
df = pd.read_csv(data, na_values=['-', 'Н/Д'])
print("1.7:")
print(df)
print()

#?      usecols : Выбор столбцов для загрузки.
df = pd.read_csv(data, usecols=['Name', 'Age'])
print("1.8:")
print(df)
print()

#?      chunksize=chunk_size(Если файл слишком велик, читайте его порциями:)
print("1.9:")
chunk_size = 1
for chunk in pd.read_csv(data, chunksize=chunk_size, index_col="ID"):
    print(chunk)    # Ваша функция обработки
print()

#? Указание типов данных
#   Задайте типы столбцов для оптимизации:
print("1.99:")
dtypes = {"ID": int, "Name": str, "Age": int}
df = pd.read_csv(data, dtype=dtypes)
print(df)
print()
print()


#! 2. Запись данных в файл CSV: Для записи данных DataFrame в файл CSV используется метод to_csv().
# Указываем index=False, чтобы не сохранять индексы
df.to_csv("new_file.csv", index=False)
#? Ключевые параметры to_csv:
#   index : Записывать ли индексы (по умолчанию True).
#   sep : Разделитель (например, ;).
#   header : Записывать ли заголовки (по умолчанию True).
#   na_rep : Значение для пропущенных данных (например, 'NaN').


#! 3. Просмотр данных: Методы head() и tail() позволяют просмотреть начало и конец DataFrame соответственно.
print("3.1")
print(f"Просмотр первых 5 строк DataFrame:\n{df.head()}")    # Просмотр первых 5 строк DataFrame
print()
print("3.2:")
print(f"Просмотр последних 5 строк DataFrame:\n{df.tail()}")    # Просмотр последних 5 строк DataFrame
print()
print()
print()


#! 4. Основные атрибуты и методы DataFrame: 
# После чтения данных в DataFrame можно использовать различные атрибуты 
# и методы для работы с данными, такие как:
#   shape
#   columns
#   describe()
print("4.1")
print(f"DataFrames shape: {df.shape = }")           #? Получение размера DataFrame (количество строк, количество столбцов)
print()
print("4.2:")
print(f"DataFrames columns: {df.columns = }")       #? Получение списка названий столбцов
print()
print("4.3:")
print(f"DataFrames statics: {df.describe() = }")    #? Получение списка названий столбцов
print()
